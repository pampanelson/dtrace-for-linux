Linux port of DTrace

April 2008
Paul D. Fox
fox@crisp.demon.co.uk

Licensing
=========

The majority (if not all) of this code falls under Sun's CDDL
license. Some files or headers may originate with GPL code, e.g.
ELF libraries from GLIBC or RedHat. The original files
copyrights are left intact, so please honour those as appropriate.

Any mistakes or omissions in copyright attribution will be my mistake,
so please let me know if there are such cases.

The linux kernel was referred to in order to engineer the glue
for dtrace behavior, and there is no intention of making this
code fall under anything other than CDDL.

I have no political affiliation or preference for a licensing scheme,
simply that Sun has gracefully donated to the community a large body
of work.

My efforts are simply in glueing pieces together and as such,
these pieces of work may be considered falling somewhere between
GPL and CDDL. I reserve the right to change the licensing model
for my own code at a later date, when and if someone puts forward
a case as to the correct license agreement. I will not and can not 
ascribe code that does not belong to me.

If the code is useful to you - great. Spread it around and get
people to use, debug and enhance it.


Miscellaneous
=============

This is a pre-alpha, work-in-progress port of Sun's DTrace kernel
debugging tool for Linux. It is not prime-time and much of it
doesnt compile.

I have taken a variety of approaches to get where I am:

custom include dir: 

	- <linux> for user land tools which front-ends /usr/include and
	  /usr/include/sys
	- <sys> for the kernel drivers.

makefiles are incomplete - I use 'makefile' and will clean up Suns
Makefile and Makefile.targ and other extraneous subdirs to simplify things.

make-me is a temporary script to build the kernel drivers.

No top-level makefile at present. In cmd/dtrace/dtrace is a 64-bit dtrace
binary built on RedHat FC8. Will remove that and make it buildable.

Kernel drivers assume access to /usr/src/linux -- needs to be fixed.
kernel drivers dont compile yet. Lots of use of 

	# if defined(sun)
	...
	# endif

for bits we wont want (much cribbed from the FreeBSD port).

Some code has

	# if linux
	...
	#endif

where its definitely Linux time.

No GPL code in here at present; all CDDL.

'tags' files are CRiSP format cross-reference files. If you dont have
CRiSP, delete them and build your own !

If you see 'warn' in a makefile, its a tool which color codes gcc
warnings and errors and makes it easier to read the output. It also
knows how to hide the exceptionally annoying non-warning output lines
which are impossible to fix in real life code without a gazillion
of compiler flags.

INSTALLATION
============

Run 'make' with no arguments to see the current options.

make all
	to compile the drivers and user space commands. Check the file
	Packages, for hints on what you need (not much, but libelf, kernel
	source, flex/yacc -- bison will do).

make load
	To load the drivers, and then you can play with cmd/dtrace/dtrace.

make unl
	to unload the drivers.

make test
	To run the userland cmd/dtrace regression test

DRIVERS
=======

You dont really need to worry about the drivers (its all encapsulated into
a single driver file -- dtracedrv.ko, assuming all goes well). You
may find these pop into /dev on 'make load'.

/dev/dtrace

	The main component of the implementation.

/dev/fbt
	A 'provider' which provides a mechanism for accessing a collection
	of features via dtrace. This is the function-boundary-tracing module,
	and it the bit of magic which can plant breakpoints on any
	kernel function.

/dev/dtrace_profile
	Used by the profile-NNN and tick-NNN probe provider.

/dev/sdt
	Static dtrace probe driver.

/dev/systrace
	System call tracing driver.
