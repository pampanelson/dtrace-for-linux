#! /usr/bin/perl

# $Header:$

# Handle syscall names which vary in location and available from
# one kernel and archicture to the next.

# Author: Paul Fox
# Date: June 2008

use strict;
use warnings;

use File::Basename;
use FileHandle;
use Getopt::Long;
use IO::File;
use POSIX;

#######################################################################
#   Command line switches.					      #
#######################################################################
my %opts;

sub main
{
	Getopt::Long::Configure('no_ignore_case');
	usage() unless GetOptions(\%opts,
		'help',
		);

	usage() if ($opts{help});
	my $ver = `uname -r`;
	chomp($ver);

        my $bits = 0;
        my $machine = `uname -m`;
        if ($machine =~ /x86_64/) {
          $bits = 64;
        } elsif ($bits =~ /i[34567]86/) {
          $bits = 32;
        } else {
          die "Unexpected machine: $machine";
        }

	my %calls;
        my @unistd_h_candidates 
          = (
             # linux-2.6.15, 2.6.23:
             "/lib/modules/$ver/build/include/asm/unistd.h",
             # linux-2.6.26:
             "/lib/modules/$ver/build/include/asm-x86/unistd_$bits.h",
             # linux-2.6.28-rc7:
             "/lib/modules/$ver/build/arch/x86/include/asm/unistd_$bits.h"
             );

        my $syscall_count = 0;
        foreach my $f (@unistd_h_candidates) {
          if (-e $f) {
		print "Processing: $f\n";
		my $fh = new FileHandle($f);
		if (!$fh) {
			die "Cannot open $f: $!";
		}
		while (<$fh>) {
			next if !/define\s+(__NR[A-Z_a-z0-9]+)\s+(.*)/;
			$calls{$1} = $2;
                        $syscall_count += 1;
		}
                last;
          }
	}

        # Make sure we've found reasonable number of system calls.
        # 2.6.15 i386 has 300+, x86_64 has 255
        die "Unable to generate syscall table" unless ($syscall_count > 200);

	my $name = $ARGV[0];
	my $fh = new FileHandle(">drivers/dtrace/syscalls-$name.tbl");
	print $fh "/* This file is automatically generated from mksyscall.pl */\n";
	print $fh "/* Do not edit! */\n";
	foreach my $c (sort(keys(%calls))) {
		print $fh "#if defined($c)\n";
		print $fh " [$c] = \"$c\",\n";
		print $fh "#endif\n";
	}

}
#######################################################################
#   Print out command line usage.				      #
#######################################################################
sub usage
{
	print "Some help...\n";
	print "Usage: \n";
	print "\n";
	print "Switches:\n";
	print "\n";
	exit(1);
}

main();
0;

